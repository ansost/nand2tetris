push: |-
  @{integer}
  D=A
  @SP
  AM=M+1
  A=A-1
  M=D
push2: |-
  @{integer}
  D=A
  @{segment}
  {insert}
  D=M
  @SP
  AM=M+1
  A=A-1
  M=D
pop: |-
  @{integer}
  D=A
  @{segment}
  {insert}
  @R15
  M=D
  @SP
  AM=M-1
  D=M
  @R15
  A=M
  M=D
add: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  M=M+D
sub: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  M=M-D
neg: |-
  @SP
  AM=M-1
  M=-M
  @SP
  M=M+1
eq: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  D=D-M
  @ISFALSEEQ{repeats}
  D;JNE
  @SP
  A=M-1
  M=-1
  @CONTEQ{repeats}
  0;JMP
  (ISFALSEEQ{repeats})
  @SP
  A=M-1
  M=0
  (CONTEQ{repeats})
gt: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  D=D-M
  @ISLESSERGT{repeats}
  D;JLT
  @SP
  A=M-1
  M=0
  @CONTGT{repeats}
  0;JMP
  (ISLESSERGT{repeats})
  @SP
  A=M-1
  M=-1
  (CONTGT{repeats})
lt: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  D=D-M
  @ISGREATERLT{repeats}
  D;JGT
  @SP
  A=M-1
  M=0
  @CONTLT{repeats}
  0;JMP
  (ISGREATERLT{repeats})
  @SP
  A=M-1
  M=-1
  (CONTLT{repeats})
and: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  M=M&D
or: |-
  @SP
  AM=M-1
  D=M
  A=A-1
  M=M|D
not: |-
  @SP
  A=M-1
  M=!M
if-goto: |-
  @SP
  A=M-1
  D=M
  @SP
  M=M-1
  @{function_name}${label_name}
  D;JNE
goto: |-
  @{function_name}${label_name}
  0;JMP
call: |-
  @{returnaddress}
  D=A
  @SP
  A=M
  M=D
  @SP
  M=M+1
segment: |-
  @SP
  A=M
  M=D
  @SP
  M=M+1
args: |-
  @{arguments}
  D=A
  @SP
  D=M-D
  @ARG
  M=D
  @SP
  D=M
  @LCL
  M=D
  @{function_name}
  0;JMP
  ({returnaddress})
return: |-
  @LCL
  D=M
  @R13
  M=D
  @5
  A=D-A
  D=M
  @R15
  M=D
  @SP
  A=M-1
  D=M
  @ARG
  A=M
  M=D
  D=A
  @SP
  M=D+1
func_args: |-
  @SP
  A=M
  M=0
  @SP
  M=M+1
